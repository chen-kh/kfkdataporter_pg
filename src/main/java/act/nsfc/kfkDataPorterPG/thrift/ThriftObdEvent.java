/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package act.nsfc.kfkDataPorterPG.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-18")
public class ThriftObdEvent implements org.apache.thrift.TBase<ThriftObdEvent, ThriftObdEvent._Fields>,
		java.io.Serializable, Cloneable, Comparable<ThriftObdEvent> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ThriftObdEvent");

	private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn",
			org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField EVENTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"eventtime", org.apache.thrift.protocol.TType.I64, (short) 2);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"type", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField GPSTIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"gpstime", org.apache.thrift.protocol.TType.I64, (short) 4);
	private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon",
			org.apache.thrift.protocol.TType.DOUBLE, (short) 5);
	private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat",
			org.apache.thrift.protocol.TType.DOUBLE, (short) 6);
	private static final org.apache.thrift.protocol.TField OLD_VIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"oldVin", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField NEW_VIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"newVin", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField RES_FIELD_DESC = new org.apache.thrift.protocol.TField("res",
			org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new ThriftObdEventStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ThriftObdEventTupleSchemeFactory());
	}

	public String sn; // required
	public long eventtime; // required
	public int type; // optional
	public long gpstime; // required
	public double lon; // optional
	public double lat; // optional
	public String oldVin; // optional
	public String newVin; // optional
	public String res; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SN((short) 1, "sn"), EVENTTIME((short) 2, "eventtime"), TYPE((short) 3, "type"), GPSTIME((short) 4,
				"gpstime"), LON((short) 5, "lon"), LAT((short) 6, "lat"), OLD_VIN((short) 7,
						"oldVin"), NEW_VIN((short) 8, "newVin"), RES((short) 9, "res");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SN
				return SN;
			case 2: // EVENTTIME
				return EVENTTIME;
			case 3: // TYPE
				return TYPE;
			case 4: // GPSTIME
				return GPSTIME;
			case 5: // LON
				return LON;
			case 6: // LAT
				return LAT;
			case 7: // OLD_VIN
				return OLD_VIN;
			case 8: // NEW_VIN
				return NEW_VIN;
			case 9: // RES
				return RES;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __EVENTTIME_ISSET_ID = 0;
	private static final int __TYPE_ISSET_ID = 1;
	private static final int __GPSTIME_ISSET_ID = 2;
	private static final int __LON_ISSET_ID = 3;
	private static final int __LAT_ISSET_ID = 4;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = { _Fields.TYPE, _Fields.LON, _Fields.LAT, _Fields.OLD_VIN,
			_Fields.NEW_VIN, _Fields.RES };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SN,
				new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EVENTTIME,
				new org.apache.thrift.meta_data.FieldMetaData("eventtime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.GPSTIME,
				new org.apache.thrift.meta_data.FieldMetaData("gpstime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.LON,
				new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.LAT,
				new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.OLD_VIN,
				new org.apache.thrift.meta_data.FieldMetaData("oldVin",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NEW_VIN,
				new org.apache.thrift.meta_data.FieldMetaData("newVin",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RES,
				new org.apache.thrift.meta_data.FieldMetaData("res", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftObdEvent.class, metaDataMap);
	}

	public ThriftObdEvent() {
	}

	public ThriftObdEvent(String sn, long eventtime, long gpstime) {
		this();
		this.sn = sn;
		this.eventtime = eventtime;
		setEventtimeIsSet(true);
		this.gpstime = gpstime;
		setGpstimeIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ThriftObdEvent(ThriftObdEvent other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSn()) {
			this.sn = other.sn;
		}
		this.eventtime = other.eventtime;
		this.type = other.type;
		this.gpstime = other.gpstime;
		this.lon = other.lon;
		this.lat = other.lat;
		if (other.isSetOldVin()) {
			this.oldVin = other.oldVin;
		}
		if (other.isSetNewVin()) {
			this.newVin = other.newVin;
		}
		if (other.isSetRes()) {
			this.res = other.res;
		}
	}

	public ThriftObdEvent deepCopy() {
		return new ThriftObdEvent(this);
	}

	@Override
	public void clear() {
		this.sn = null;
		setEventtimeIsSet(false);
		this.eventtime = 0;
		setTypeIsSet(false);
		this.type = 0;
		setGpstimeIsSet(false);
		this.gpstime = 0;
		setLonIsSet(false);
		this.lon = 0.0;
		setLatIsSet(false);
		this.lat = 0.0;
		this.oldVin = null;
		this.newVin = null;
		this.res = null;
	}

	public String getSn() {
		return this.sn;
	}

	public ThriftObdEvent setSn(String sn) {
		this.sn = sn;
		return this;
	}

	public void unsetSn() {
		this.sn = null;
	}

	/**
	 * Returns true if field sn is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSn() {
		return this.sn != null;
	}

	public void setSnIsSet(boolean value) {
		if (!value) {
			this.sn = null;
		}
	}

	public long getEventtime() {
		return this.eventtime;
	}

	public ThriftObdEvent setEventtime(long eventtime) {
		this.eventtime = eventtime;
		setEventtimeIsSet(true);
		return this;
	}

	public void unsetEventtime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTTIME_ISSET_ID);
	}

	/**
	 * Returns true if field eventtime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetEventtime() {
		return EncodingUtils.testBit(__isset_bitfield, __EVENTTIME_ISSET_ID);
	}

	public void setEventtimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTTIME_ISSET_ID, value);
	}

	public int getType() {
		return this.type;
	}

	public ThriftObdEvent setType(int type) {
		this.type = type;
		setTypeIsSet(true);
		return this;
	}

	public void unsetType() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	/**
	 * Returns true if field type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	public void setTypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
	}

	public long getGpstime() {
		return this.gpstime;
	}

	public ThriftObdEvent setGpstime(long gpstime) {
		this.gpstime = gpstime;
		setGpstimeIsSet(true);
		return this;
	}

	public void unsetGpstime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GPSTIME_ISSET_ID);
	}

	/**
	 * Returns true if field gpstime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetGpstime() {
		return EncodingUtils.testBit(__isset_bitfield, __GPSTIME_ISSET_ID);
	}

	public void setGpstimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GPSTIME_ISSET_ID, value);
	}

	public double getLon() {
		return this.lon;
	}

	public ThriftObdEvent setLon(double lon) {
		this.lon = lon;
		setLonIsSet(true);
		return this;
	}

	public void unsetLon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LON_ISSET_ID);
	}

	/**
	 * Returns true if field lon is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLon() {
		return EncodingUtils.testBit(__isset_bitfield, __LON_ISSET_ID);
	}

	public void setLonIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LON_ISSET_ID, value);
	}

	public double getLat() {
		return this.lat;
	}

	public ThriftObdEvent setLat(double lat) {
		this.lat = lat;
		setLatIsSet(true);
		return this;
	}

	public void unsetLat() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
	}

	/**
	 * Returns true if field lat is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLat() {
		return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
	}

	public void setLatIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
	}

	public String getOldVin() {
		return this.oldVin;
	}

	public ThriftObdEvent setOldVin(String oldVin) {
		this.oldVin = oldVin;
		return this;
	}

	public void unsetOldVin() {
		this.oldVin = null;
	}

	/**
	 * Returns true if field oldVin is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetOldVin() {
		return this.oldVin != null;
	}

	public void setOldVinIsSet(boolean value) {
		if (!value) {
			this.oldVin = null;
		}
	}

	public String getNewVin() {
		return this.newVin;
	}

	public ThriftObdEvent setNewVin(String newVin) {
		this.newVin = newVin;
		return this;
	}

	public void unsetNewVin() {
		this.newVin = null;
	}

	/**
	 * Returns true if field newVin is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNewVin() {
		return this.newVin != null;
	}

	public void setNewVinIsSet(boolean value) {
		if (!value) {
			this.newVin = null;
		}
	}

	public String getRes() {
		return this.res;
	}

	public ThriftObdEvent setRes(String res) {
		this.res = res;
		return this;
	}

	public void unsetRes() {
		this.res = null;
	}

	/**
	 * Returns true if field res is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRes() {
		return this.res != null;
	}

	public void setResIsSet(boolean value) {
		if (!value) {
			this.res = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SN:
			if (value == null) {
				unsetSn();
			} else {
				setSn((String) value);
			}
			break;

		case EVENTTIME:
			if (value == null) {
				unsetEventtime();
			} else {
				setEventtime((Long) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((Integer) value);
			}
			break;

		case GPSTIME:
			if (value == null) {
				unsetGpstime();
			} else {
				setGpstime((Long) value);
			}
			break;

		case LON:
			if (value == null) {
				unsetLon();
			} else {
				setLon((Double) value);
			}
			break;

		case LAT:
			if (value == null) {
				unsetLat();
			} else {
				setLat((Double) value);
			}
			break;

		case OLD_VIN:
			if (value == null) {
				unsetOldVin();
			} else {
				setOldVin((String) value);
			}
			break;

		case NEW_VIN:
			if (value == null) {
				unsetNewVin();
			} else {
				setNewVin((String) value);
			}
			break;

		case RES:
			if (value == null) {
				unsetRes();
			} else {
				setRes((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SN:
			return getSn();

		case EVENTTIME:
			return getEventtime();

		case TYPE:
			return getType();

		case GPSTIME:
			return getGpstime();

		case LON:
			return getLon();

		case LAT:
			return getLat();

		case OLD_VIN:
			return getOldVin();

		case NEW_VIN:
			return getNewVin();

		case RES:
			return getRes();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SN:
			return isSetSn();
		case EVENTTIME:
			return isSetEventtime();
		case TYPE:
			return isSetType();
		case GPSTIME:
			return isSetGpstime();
		case LON:
			return isSetLon();
		case LAT:
			return isSetLat();
		case OLD_VIN:
			return isSetOldVin();
		case NEW_VIN:
			return isSetNewVin();
		case RES:
			return isSetRes();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ThriftObdEvent)
			return this.equals((ThriftObdEvent) that);
		return false;
	}

	public boolean equals(ThriftObdEvent that) {
		if (that == null)
			return false;

		boolean this_present_sn = true && this.isSetSn();
		boolean that_present_sn = true && that.isSetSn();
		if (this_present_sn || that_present_sn) {
			if (!(this_present_sn && that_present_sn))
				return false;
			if (!this.sn.equals(that.sn))
				return false;
		}

		boolean this_present_eventtime = true;
		boolean that_present_eventtime = true;
		if (this_present_eventtime || that_present_eventtime) {
			if (!(this_present_eventtime && that_present_eventtime))
				return false;
			if (this.eventtime != that.eventtime)
				return false;
		}

		boolean this_present_type = true && this.isSetType();
		boolean that_present_type = true && that.isSetType();
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (this.type != that.type)
				return false;
		}

		boolean this_present_gpstime = true;
		boolean that_present_gpstime = true;
		if (this_present_gpstime || that_present_gpstime) {
			if (!(this_present_gpstime && that_present_gpstime))
				return false;
			if (this.gpstime != that.gpstime)
				return false;
		}

		boolean this_present_lon = true && this.isSetLon();
		boolean that_present_lon = true && that.isSetLon();
		if (this_present_lon || that_present_lon) {
			if (!(this_present_lon && that_present_lon))
				return false;
			if (this.lon != that.lon)
				return false;
		}

		boolean this_present_lat = true && this.isSetLat();
		boolean that_present_lat = true && that.isSetLat();
		if (this_present_lat || that_present_lat) {
			if (!(this_present_lat && that_present_lat))
				return false;
			if (this.lat != that.lat)
				return false;
		}

		boolean this_present_oldVin = true && this.isSetOldVin();
		boolean that_present_oldVin = true && that.isSetOldVin();
		if (this_present_oldVin || that_present_oldVin) {
			if (!(this_present_oldVin && that_present_oldVin))
				return false;
			if (!this.oldVin.equals(that.oldVin))
				return false;
		}

		boolean this_present_newVin = true && this.isSetNewVin();
		boolean that_present_newVin = true && that.isSetNewVin();
		if (this_present_newVin || that_present_newVin) {
			if (!(this_present_newVin && that_present_newVin))
				return false;
			if (!this.newVin.equals(that.newVin))
				return false;
		}

		boolean this_present_res = true && this.isSetRes();
		boolean that_present_res = true && that.isSetRes();
		if (this_present_res || that_present_res) {
			if (!(this_present_res && that_present_res))
				return false;
			if (!this.res.equals(that.res))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_sn = true && (isSetSn());
		list.add(present_sn);
		if (present_sn)
			list.add(sn);

		boolean present_eventtime = true;
		list.add(present_eventtime);
		if (present_eventtime)
			list.add(eventtime);

		boolean present_type = true && (isSetType());
		list.add(present_type);
		if (present_type)
			list.add(type);

		boolean present_gpstime = true;
		list.add(present_gpstime);
		if (present_gpstime)
			list.add(gpstime);

		boolean present_lon = true && (isSetLon());
		list.add(present_lon);
		if (present_lon)
			list.add(lon);

		boolean present_lat = true && (isSetLat());
		list.add(present_lat);
		if (present_lat)
			list.add(lat);

		boolean present_oldVin = true && (isSetOldVin());
		list.add(present_oldVin);
		if (present_oldVin)
			list.add(oldVin);

		boolean present_newVin = true && (isSetNewVin());
		list.add(present_newVin);
		if (present_newVin)
			list.add(newVin);

		boolean present_res = true && (isSetRes());
		list.add(present_res);
		if (present_res)
			list.add(res);

		return list.hashCode();
	}

	@Override
	public int compareTo(ThriftObdEvent other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSn()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventtime()).compareTo(other.isSetEventtime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventtime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventtime, other.eventtime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGpstime()).compareTo(other.isSetGpstime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGpstime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpstime, other.gpstime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLon()).compareTo(other.isSetLon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, other.lon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLat()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOldVin()).compareTo(other.isSetOldVin());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOldVin()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldVin, other.oldVin);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNewVin()).compareTo(other.isSetNewVin());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNewVin()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newVin, other.newVin);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRes()).compareTo(other.isSetRes());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRes()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.res, other.res);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ThriftObdEvent(");
		boolean first = true;

		sb.append("sn:");
		if (this.sn == null) {
			sb.append("null");
		} else {
			sb.append(this.sn);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("eventtime:");
		sb.append(this.eventtime);
		first = false;
		if (isSetType()) {
			if (!first)
				sb.append(", ");
			sb.append("type:");
			sb.append(this.type);
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("gpstime:");
		sb.append(this.gpstime);
		first = false;
		if (isSetLon()) {
			if (!first)
				sb.append(", ");
			sb.append("lon:");
			sb.append(this.lon);
			first = false;
		}
		if (isSetLat()) {
			if (!first)
				sb.append(", ");
			sb.append("lat:");
			sb.append(this.lat);
			first = false;
		}
		if (isSetOldVin()) {
			if (!first)
				sb.append(", ");
			sb.append("oldVin:");
			if (this.oldVin == null) {
				sb.append("null");
			} else {
				sb.append(this.oldVin);
			}
			first = false;
		}
		if (isSetNewVin()) {
			if (!first)
				sb.append(", ");
			sb.append("newVin:");
			if (this.newVin == null) {
				sb.append("null");
			} else {
				sb.append(this.newVin);
			}
			first = false;
		}
		if (isSetRes()) {
			if (!first)
				sb.append(", ");
			sb.append("res:");
			if (this.res == null) {
				sb.append("null");
			} else {
				sb.append(this.res);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ThriftObdEventStandardSchemeFactory implements SchemeFactory {
		public ThriftObdEventStandardScheme getScheme() {
			return new ThriftObdEventStandardScheme();
		}
	}

	private static class ThriftObdEventStandardScheme extends StandardScheme<ThriftObdEvent> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftObdEvent struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sn = iprot.readString();
						struct.setSnIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // EVENTTIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.eventtime = iprot.readI64();
						struct.setEventtimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.type = iprot.readI32();
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // GPSTIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.gpstime = iprot.readI64();
						struct.setGpstimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // LON
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.lon = iprot.readDouble();
						struct.setLonIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // LAT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.lat = iprot.readDouble();
						struct.setLatIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // OLD_VIN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oldVin = iprot.readString();
						struct.setOldVinIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // NEW_VIN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.newVin = iprot.readString();
						struct.setNewVinIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // RES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.res = iprot.readString();
						struct.setResIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftObdEvent struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.sn != null) {
				oprot.writeFieldBegin(SN_FIELD_DESC);
				oprot.writeString(struct.sn);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(EVENTTIME_FIELD_DESC);
			oprot.writeI64(struct.eventtime);
			oprot.writeFieldEnd();
			if (struct.isSetType()) {
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(GPSTIME_FIELD_DESC);
			oprot.writeI64(struct.gpstime);
			oprot.writeFieldEnd();
			if (struct.isSetLon()) {
				oprot.writeFieldBegin(LON_FIELD_DESC);
				oprot.writeDouble(struct.lon);
				oprot.writeFieldEnd();
			}
			if (struct.isSetLat()) {
				oprot.writeFieldBegin(LAT_FIELD_DESC);
				oprot.writeDouble(struct.lat);
				oprot.writeFieldEnd();
			}
			if (struct.oldVin != null) {
				if (struct.isSetOldVin()) {
					oprot.writeFieldBegin(OLD_VIN_FIELD_DESC);
					oprot.writeString(struct.oldVin);
					oprot.writeFieldEnd();
				}
			}
			if (struct.newVin != null) {
				if (struct.isSetNewVin()) {
					oprot.writeFieldBegin(NEW_VIN_FIELD_DESC);
					oprot.writeString(struct.newVin);
					oprot.writeFieldEnd();
				}
			}
			if (struct.res != null) {
				if (struct.isSetRes()) {
					oprot.writeFieldBegin(RES_FIELD_DESC);
					oprot.writeString(struct.res);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ThriftObdEventTupleSchemeFactory implements SchemeFactory {
		public ThriftObdEventTupleScheme getScheme() {
			return new ThriftObdEventTupleScheme();
		}
	}

	private static class ThriftObdEventTupleScheme extends TupleScheme<ThriftObdEvent> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ThriftObdEvent struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSn()) {
				optionals.set(0);
			}
			if (struct.isSetEventtime()) {
				optionals.set(1);
			}
			if (struct.isSetType()) {
				optionals.set(2);
			}
			if (struct.isSetGpstime()) {
				optionals.set(3);
			}
			if (struct.isSetLon()) {
				optionals.set(4);
			}
			if (struct.isSetLat()) {
				optionals.set(5);
			}
			if (struct.isSetOldVin()) {
				optionals.set(6);
			}
			if (struct.isSetNewVin()) {
				optionals.set(7);
			}
			if (struct.isSetRes()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetSn()) {
				oprot.writeString(struct.sn);
			}
			if (struct.isSetEventtime()) {
				oprot.writeI64(struct.eventtime);
			}
			if (struct.isSetType()) {
				oprot.writeI32(struct.type);
			}
			if (struct.isSetGpstime()) {
				oprot.writeI64(struct.gpstime);
			}
			if (struct.isSetLon()) {
				oprot.writeDouble(struct.lon);
			}
			if (struct.isSetLat()) {
				oprot.writeDouble(struct.lat);
			}
			if (struct.isSetOldVin()) {
				oprot.writeString(struct.oldVin);
			}
			if (struct.isSetNewVin()) {
				oprot.writeString(struct.newVin);
			}
			if (struct.isSetRes()) {
				oprot.writeString(struct.res);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ThriftObdEvent struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.sn = iprot.readString();
				struct.setSnIsSet(true);
			}
			if (incoming.get(1)) {
				struct.eventtime = iprot.readI64();
				struct.setEventtimeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.type = iprot.readI32();
				struct.setTypeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.gpstime = iprot.readI64();
				struct.setGpstimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.lon = iprot.readDouble();
				struct.setLonIsSet(true);
			}
			if (incoming.get(5)) {
				struct.lat = iprot.readDouble();
				struct.setLatIsSet(true);
			}
			if (incoming.get(6)) {
				struct.oldVin = iprot.readString();
				struct.setOldVinIsSet(true);
			}
			if (incoming.get(7)) {
				struct.newVin = iprot.readString();
				struct.setNewVinIsSet(true);
			}
			if (incoming.get(8)) {
				struct.res = iprot.readString();
				struct.setResIsSet(true);
			}
		}
	}

}
