/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package act.nsfc.kfkDataPorterPG.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-30")
public class ThriftObdGps implements org.apache.thrift.TBase<ThriftObdGps, ThriftObdGps._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftObdGps> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftObdGps");

  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GPSTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("gpstime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ACCURACY_FIELD_DESC = new org.apache.thrift.protocol.TField("accuracy", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionMode", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftObdGpsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftObdGpsTupleSchemeFactory());
  }

  public String sn; // required
  public long gpstime; // required
  public double lon; // optional
  public double lat; // optional
  public int accuracy; // optional
  public double speed; // optional
  public int direction; // optional
  public double height; // optional
  public int positionMode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SN((short)1, "sn"),
    GPSTIME((short)2, "gpstime"),
    LON((short)3, "lon"),
    LAT((short)4, "lat"),
    ACCURACY((short)5, "accuracy"),
    SPEED((short)6, "speed"),
    DIRECTION((short)7, "direction"),
    HEIGHT((short)8, "height"),
    POSITION_MODE((short)9, "positionMode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SN
          return SN;
        case 2: // GPSTIME
          return GPSTIME;
        case 3: // LON
          return LON;
        case 4: // LAT
          return LAT;
        case 5: // ACCURACY
          return ACCURACY;
        case 6: // SPEED
          return SPEED;
        case 7: // DIRECTION
          return DIRECTION;
        case 8: // HEIGHT
          return HEIGHT;
        case 9: // POSITION_MODE
          return POSITION_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GPSTIME_ISSET_ID = 0;
  private static final int __LON_ISSET_ID = 1;
  private static final int __LAT_ISSET_ID = 2;
  private static final int __ACCURACY_ISSET_ID = 3;
  private static final int __SPEED_ISSET_ID = 4;
  private static final int __DIRECTION_ISSET_ID = 5;
  private static final int __HEIGHT_ISSET_ID = 6;
  private static final int __POSITIONMODE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LON,_Fields.LAT,_Fields.ACCURACY,_Fields.SPEED,_Fields.DIRECTION,_Fields.HEIGHT,_Fields.POSITION_MODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GPSTIME, new org.apache.thrift.meta_data.FieldMetaData("gpstime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCURACY, new org.apache.thrift.meta_data.FieldMetaData("accuracy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_MODE, new org.apache.thrift.meta_data.FieldMetaData("positionMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftObdGps.class, metaDataMap);
  }

  public ThriftObdGps() {
  }

  public ThriftObdGps(
    String sn,
    long gpstime)
  {
    this();
    this.sn = sn;
    this.gpstime = gpstime;
    setGpstimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftObdGps(ThriftObdGps other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    this.gpstime = other.gpstime;
    this.lon = other.lon;
    this.lat = other.lat;
    this.accuracy = other.accuracy;
    this.speed = other.speed;
    this.direction = other.direction;
    this.height = other.height;
    this.positionMode = other.positionMode;
  }

  public ThriftObdGps deepCopy() {
    return new ThriftObdGps(this);
  }

  @Override
  public void clear() {
    this.sn = null;
    setGpstimeIsSet(false);
    this.gpstime = 0;
    setLonIsSet(false);
    this.lon = 0.0;
    setLatIsSet(false);
    this.lat = 0.0;
    setAccuracyIsSet(false);
    this.accuracy = 0;
    setSpeedIsSet(false);
    this.speed = 0.0;
    setDirectionIsSet(false);
    this.direction = 0;
    setHeightIsSet(false);
    this.height = 0.0;
    setPositionModeIsSet(false);
    this.positionMode = 0;
  }

  public String getSn() {
    return this.sn;
  }

  public ThriftObdGps setSn(String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public long getGpstime() {
    return this.gpstime;
  }

  public ThriftObdGps setGpstime(long gpstime) {
    this.gpstime = gpstime;
    setGpstimeIsSet(true);
    return this;
  }

  public void unsetGpstime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GPSTIME_ISSET_ID);
  }

  /** Returns true if field gpstime is set (has been assigned a value) and false otherwise */
  public boolean isSetGpstime() {
    return EncodingUtils.testBit(__isset_bitfield, __GPSTIME_ISSET_ID);
  }

  public void setGpstimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GPSTIME_ISSET_ID, value);
  }

  public double getLon() {
    return this.lon;
  }

  public ThriftObdGps setLon(double lon) {
    this.lon = lon;
    setLonIsSet(true);
    return this;
  }

  public void unsetLon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LON_ISSET_ID);
  }

  /** Returns true if field lon is set (has been assigned a value) and false otherwise */
  public boolean isSetLon() {
    return EncodingUtils.testBit(__isset_bitfield, __LON_ISSET_ID);
  }

  public void setLonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LON_ISSET_ID, value);
  }

  public double getLat() {
    return this.lat;
  }

  public ThriftObdGps setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
    return this;
  }

  public void unsetLat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
  }

  public int getAccuracy() {
    return this.accuracy;
  }

  public ThriftObdGps setAccuracy(int accuracy) {
    this.accuracy = accuracy;
    setAccuracyIsSet(true);
    return this;
  }

  public void unsetAccuracy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCURACY_ISSET_ID);
  }

  /** Returns true if field accuracy is set (has been assigned a value) and false otherwise */
  public boolean isSetAccuracy() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCURACY_ISSET_ID);
  }

  public void setAccuracyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCURACY_ISSET_ID, value);
  }

  public double getSpeed() {
    return this.speed;
  }

  public ThriftObdGps setSpeed(double speed) {
    this.speed = speed;
    setSpeedIsSet(true);
    return this;
  }

  public void unsetSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  /** Returns true if field speed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  public void setSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
  }

  public int getDirection() {
    return this.direction;
  }

  public ThriftObdGps setDirection(int direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public double getHeight() {
    return this.height;
  }

  public ThriftObdGps setHeight(double height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getPositionMode() {
    return this.positionMode;
  }

  public ThriftObdGps setPositionMode(int positionMode) {
    this.positionMode = positionMode;
    setPositionModeIsSet(true);
    return this;
  }

  public void unsetPositionMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONMODE_ISSET_ID);
  }

  /** Returns true if field positionMode is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionMode() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONMODE_ISSET_ID);
  }

  public void setPositionModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONMODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((String)value);
      }
      break;

    case GPSTIME:
      if (value == null) {
        unsetGpstime();
      } else {
        setGpstime((Long)value);
      }
      break;

    case LON:
      if (value == null) {
        unsetLon();
      } else {
        setLon((Double)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((Double)value);
      }
      break;

    case ACCURACY:
      if (value == null) {
        unsetAccuracy();
      } else {
        setAccuracy((Integer)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((Double)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Double)value);
      }
      break;

    case POSITION_MODE:
      if (value == null) {
        unsetPositionMode();
      } else {
        setPositionMode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SN:
      return getSn();

    case GPSTIME:
      return getGpstime();

    case LON:
      return getLon();

    case LAT:
      return getLat();

    case ACCURACY:
      return getAccuracy();

    case SPEED:
      return getSpeed();

    case DIRECTION:
      return getDirection();

    case HEIGHT:
      return getHeight();

    case POSITION_MODE:
      return getPositionMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SN:
      return isSetSn();
    case GPSTIME:
      return isSetGpstime();
    case LON:
      return isSetLon();
    case LAT:
      return isSetLat();
    case ACCURACY:
      return isSetAccuracy();
    case SPEED:
      return isSetSpeed();
    case DIRECTION:
      return isSetDirection();
    case HEIGHT:
      return isSetHeight();
    case POSITION_MODE:
      return isSetPositionMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftObdGps)
      return this.equals((ThriftObdGps)that);
    return false;
  }

  public boolean equals(ThriftObdGps that) {
    if (that == null)
      return false;

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_gpstime = true;
    boolean that_present_gpstime = true;
    if (this_present_gpstime || that_present_gpstime) {
      if (!(this_present_gpstime && that_present_gpstime))
        return false;
      if (this.gpstime != that.gpstime)
        return false;
    }

    boolean this_present_lon = true && this.isSetLon();
    boolean that_present_lon = true && that.isSetLon();
    if (this_present_lon || that_present_lon) {
      if (!(this_present_lon && that_present_lon))
        return false;
      if (this.lon != that.lon)
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_accuracy = true && this.isSetAccuracy();
    boolean that_present_accuracy = true && that.isSetAccuracy();
    if (this_present_accuracy || that_present_accuracy) {
      if (!(this_present_accuracy && that_present_accuracy))
        return false;
      if (this.accuracy != that.accuracy)
        return false;
    }

    boolean this_present_speed = true && this.isSetSpeed();
    boolean that_present_speed = true && that.isSetSpeed();
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_positionMode = true && this.isSetPositionMode();
    boolean that_present_positionMode = true && that.isSetPositionMode();
    if (this_present_positionMode || that_present_positionMode) {
      if (!(this_present_positionMode && that_present_positionMode))
        return false;
      if (this.positionMode != that.positionMode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sn = true && (isSetSn());
    list.add(present_sn);
    if (present_sn)
      list.add(sn);

    boolean present_gpstime = true;
    list.add(present_gpstime);
    if (present_gpstime)
      list.add(gpstime);

    boolean present_lon = true && (isSetLon());
    list.add(present_lon);
    if (present_lon)
      list.add(lon);

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_accuracy = true && (isSetAccuracy());
    list.add(present_accuracy);
    if (present_accuracy)
      list.add(accuracy);

    boolean present_speed = true && (isSetSpeed());
    list.add(present_speed);
    if (present_speed)
      list.add(speed);

    boolean present_direction = true && (isSetDirection());
    list.add(present_direction);
    if (present_direction)
      list.add(direction);

    boolean present_height = true && (isSetHeight());
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_positionMode = true && (isSetPositionMode());
    list.add(present_positionMode);
    if (present_positionMode)
      list.add(positionMode);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftObdGps other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGpstime()).compareTo(other.isSetGpstime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpstime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpstime, other.gpstime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon()).compareTo(other.isSetLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, other.lon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccuracy()).compareTo(other.isSetAccuracy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccuracy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accuracy, other.accuracy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionMode()).compareTo(other.isSetPositionMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionMode, other.positionMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftObdGps(");
    boolean first = true;

    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpstime:");
    sb.append(this.gpstime);
    first = false;
    if (isSetLon()) {
      if (!first) sb.append(", ");
      sb.append("lon:");
      sb.append(this.lon);
      first = false;
    }
    if (isSetLat()) {
      if (!first) sb.append(", ");
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
    }
    if (isSetAccuracy()) {
      if (!first) sb.append(", ");
      sb.append("accuracy:");
      sb.append(this.accuracy);
      first = false;
    }
    if (isSetSpeed()) {
      if (!first) sb.append(", ");
      sb.append("speed:");
      sb.append(this.speed);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      sb.append(this.direction);
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetPositionMode()) {
      if (!first) sb.append(", ");
      sb.append("positionMode:");
      sb.append(this.positionMode);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftObdGpsStandardSchemeFactory implements SchemeFactory {
    public ThriftObdGpsStandardScheme getScheme() {
      return new ThriftObdGpsStandardScheme();
    }
  }

  private static class ThriftObdGpsStandardScheme extends StandardScheme<ThriftObdGps> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftObdGps struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GPSTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gpstime = iprot.readI64();
              struct.setGpstimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LON
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lon = iprot.readDouble();
              struct.setLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lat = iprot.readDouble();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCURACY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accuracy = iprot.readI32();
              struct.setAccuracyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.speed = iprot.readDouble();
              struct.setSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = iprot.readI32();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.height = iprot.readDouble();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionMode = iprot.readI32();
              struct.setPositionModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftObdGps struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.sn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GPSTIME_FIELD_DESC);
      oprot.writeI64(struct.gpstime);
      oprot.writeFieldEnd();
      if (struct.isSetLon()) {
        oprot.writeFieldBegin(LON_FIELD_DESC);
        oprot.writeDouble(struct.lon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLat()) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccuracy()) {
        oprot.writeFieldBegin(ACCURACY_FIELD_DESC);
        oprot.writeI32(struct.accuracy);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpeed()) {
        oprot.writeFieldBegin(SPEED_FIELD_DESC);
        oprot.writeDouble(struct.speed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDirection()) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionMode()) {
        oprot.writeFieldBegin(POSITION_MODE_FIELD_DESC);
        oprot.writeI32(struct.positionMode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftObdGpsTupleSchemeFactory implements SchemeFactory {
    public ThriftObdGpsTupleScheme getScheme() {
      return new ThriftObdGpsTupleScheme();
    }
  }

  private static class ThriftObdGpsTupleScheme extends TupleScheme<ThriftObdGps> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftObdGps struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSn()) {
        optionals.set(0);
      }
      if (struct.isSetGpstime()) {
        optionals.set(1);
      }
      if (struct.isSetLon()) {
        optionals.set(2);
      }
      if (struct.isSetLat()) {
        optionals.set(3);
      }
      if (struct.isSetAccuracy()) {
        optionals.set(4);
      }
      if (struct.isSetSpeed()) {
        optionals.set(5);
      }
      if (struct.isSetDirection()) {
        optionals.set(6);
      }
      if (struct.isSetHeight()) {
        optionals.set(7);
      }
      if (struct.isSetPositionMode()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetGpstime()) {
        oprot.writeI64(struct.gpstime);
      }
      if (struct.isSetLon()) {
        oprot.writeDouble(struct.lon);
      }
      if (struct.isSetLat()) {
        oprot.writeDouble(struct.lat);
      }
      if (struct.isSetAccuracy()) {
        oprot.writeI32(struct.accuracy);
      }
      if (struct.isSetSpeed()) {
        oprot.writeDouble(struct.speed);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction);
      }
      if (struct.isSetHeight()) {
        oprot.writeDouble(struct.height);
      }
      if (struct.isSetPositionMode()) {
        oprot.writeI32(struct.positionMode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftObdGps struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gpstime = iprot.readI64();
        struct.setGpstimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lon = iprot.readDouble();
        struct.setLonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lat = iprot.readDouble();
        struct.setLatIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accuracy = iprot.readI32();
        struct.setAccuracyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.speed = iprot.readDouble();
        struct.setSpeedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.direction = iprot.readI32();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.height = iprot.readDouble();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(8)) {
        struct.positionMode = iprot.readI32();
        struct.setPositionModeIsSet(true);
      }
    }
  }

}

