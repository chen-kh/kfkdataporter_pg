/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package act.nsfc.kfkDataPorterPG.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-30")
public class ThriftObdError implements org.apache.thrift.TBase<ThriftObdError, ThriftObdError._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftObdError> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftObdError");

  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GPSTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("gpstime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FAULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("faultCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FAULT_CODE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("faultCodeState", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftObdErrorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftObdErrorTupleSchemeFactory());
  }

  public String sn; // required
  public long gpstime; // required
  public String faultCode; // optional
  public String faultCodeState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SN((short)1, "sn"),
    GPSTIME((short)2, "gpstime"),
    FAULT_CODE((short)3, "faultCode"),
    FAULT_CODE_STATE((short)4, "faultCodeState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SN
          return SN;
        case 2: // GPSTIME
          return GPSTIME;
        case 3: // FAULT_CODE
          return FAULT_CODE;
        case 4: // FAULT_CODE_STATE
          return FAULT_CODE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GPSTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FAULT_CODE,_Fields.FAULT_CODE_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GPSTIME, new org.apache.thrift.meta_data.FieldMetaData("gpstime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("faultCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAULT_CODE_STATE, new org.apache.thrift.meta_data.FieldMetaData("faultCodeState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftObdError.class, metaDataMap);
  }

  public ThriftObdError() {
  }

  public ThriftObdError(
    String sn,
    long gpstime)
  {
    this();
    this.sn = sn;
    this.gpstime = gpstime;
    setGpstimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftObdError(ThriftObdError other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    this.gpstime = other.gpstime;
    if (other.isSetFaultCode()) {
      this.faultCode = other.faultCode;
    }
    if (other.isSetFaultCodeState()) {
      this.faultCodeState = other.faultCodeState;
    }
  }

  public ThriftObdError deepCopy() {
    return new ThriftObdError(this);
  }

  @Override
  public void clear() {
    this.sn = null;
    setGpstimeIsSet(false);
    this.gpstime = 0;
    this.faultCode = null;
    this.faultCodeState = null;
  }

  public String getSn() {
    return this.sn;
  }

  public ThriftObdError setSn(String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public long getGpstime() {
    return this.gpstime;
  }

  public ThriftObdError setGpstime(long gpstime) {
    this.gpstime = gpstime;
    setGpstimeIsSet(true);
    return this;
  }

  public void unsetGpstime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GPSTIME_ISSET_ID);
  }

  /** Returns true if field gpstime is set (has been assigned a value) and false otherwise */
  public boolean isSetGpstime() {
    return EncodingUtils.testBit(__isset_bitfield, __GPSTIME_ISSET_ID);
  }

  public void setGpstimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GPSTIME_ISSET_ID, value);
  }

  public String getFaultCode() {
    return this.faultCode;
  }

  public ThriftObdError setFaultCode(String faultCode) {
    this.faultCode = faultCode;
    return this;
  }

  public void unsetFaultCode() {
    this.faultCode = null;
  }

  /** Returns true if field faultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetFaultCode() {
    return this.faultCode != null;
  }

  public void setFaultCodeIsSet(boolean value) {
    if (!value) {
      this.faultCode = null;
    }
  }

  public String getFaultCodeState() {
    return this.faultCodeState;
  }

  public ThriftObdError setFaultCodeState(String faultCodeState) {
    this.faultCodeState = faultCodeState;
    return this;
  }

  public void unsetFaultCodeState() {
    this.faultCodeState = null;
  }

  /** Returns true if field faultCodeState is set (has been assigned a value) and false otherwise */
  public boolean isSetFaultCodeState() {
    return this.faultCodeState != null;
  }

  public void setFaultCodeStateIsSet(boolean value) {
    if (!value) {
      this.faultCodeState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((String)value);
      }
      break;

    case GPSTIME:
      if (value == null) {
        unsetGpstime();
      } else {
        setGpstime((Long)value);
      }
      break;

    case FAULT_CODE:
      if (value == null) {
        unsetFaultCode();
      } else {
        setFaultCode((String)value);
      }
      break;

    case FAULT_CODE_STATE:
      if (value == null) {
        unsetFaultCodeState();
      } else {
        setFaultCodeState((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SN:
      return getSn();

    case GPSTIME:
      return getGpstime();

    case FAULT_CODE:
      return getFaultCode();

    case FAULT_CODE_STATE:
      return getFaultCodeState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SN:
      return isSetSn();
    case GPSTIME:
      return isSetGpstime();
    case FAULT_CODE:
      return isSetFaultCode();
    case FAULT_CODE_STATE:
      return isSetFaultCodeState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftObdError)
      return this.equals((ThriftObdError)that);
    return false;
  }

  public boolean equals(ThriftObdError that) {
    if (that == null)
      return false;

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_gpstime = true;
    boolean that_present_gpstime = true;
    if (this_present_gpstime || that_present_gpstime) {
      if (!(this_present_gpstime && that_present_gpstime))
        return false;
      if (this.gpstime != that.gpstime)
        return false;
    }

    boolean this_present_faultCode = true && this.isSetFaultCode();
    boolean that_present_faultCode = true && that.isSetFaultCode();
    if (this_present_faultCode || that_present_faultCode) {
      if (!(this_present_faultCode && that_present_faultCode))
        return false;
      if (!this.faultCode.equals(that.faultCode))
        return false;
    }

    boolean this_present_faultCodeState = true && this.isSetFaultCodeState();
    boolean that_present_faultCodeState = true && that.isSetFaultCodeState();
    if (this_present_faultCodeState || that_present_faultCodeState) {
      if (!(this_present_faultCodeState && that_present_faultCodeState))
        return false;
      if (!this.faultCodeState.equals(that.faultCodeState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sn = true && (isSetSn());
    list.add(present_sn);
    if (present_sn)
      list.add(sn);

    boolean present_gpstime = true;
    list.add(present_gpstime);
    if (present_gpstime)
      list.add(gpstime);

    boolean present_faultCode = true && (isSetFaultCode());
    list.add(present_faultCode);
    if (present_faultCode)
      list.add(faultCode);

    boolean present_faultCodeState = true && (isSetFaultCodeState());
    list.add(present_faultCodeState);
    if (present_faultCodeState)
      list.add(faultCodeState);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftObdError other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGpstime()).compareTo(other.isSetGpstime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpstime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpstime, other.gpstime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaultCode()).compareTo(other.isSetFaultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faultCode, other.faultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaultCodeState()).compareTo(other.isSetFaultCodeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaultCodeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faultCodeState, other.faultCodeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftObdError(");
    boolean first = true;

    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpstime:");
    sb.append(this.gpstime);
    first = false;
    if (isSetFaultCode()) {
      if (!first) sb.append(", ");
      sb.append("faultCode:");
      if (this.faultCode == null) {
        sb.append("null");
      } else {
        sb.append(this.faultCode);
      }
      first = false;
    }
    if (isSetFaultCodeState()) {
      if (!first) sb.append(", ");
      sb.append("faultCodeState:");
      if (this.faultCodeState == null) {
        sb.append("null");
      } else {
        sb.append(this.faultCodeState);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftObdErrorStandardSchemeFactory implements SchemeFactory {
    public ThriftObdErrorStandardScheme getScheme() {
      return new ThriftObdErrorStandardScheme();
    }
  }

  private static class ThriftObdErrorStandardScheme extends StandardScheme<ThriftObdError> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftObdError struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GPSTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gpstime = iprot.readI64();
              struct.setGpstimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faultCode = iprot.readString();
              struct.setFaultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAULT_CODE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faultCodeState = iprot.readString();
              struct.setFaultCodeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftObdError struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.sn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GPSTIME_FIELD_DESC);
      oprot.writeI64(struct.gpstime);
      oprot.writeFieldEnd();
      if (struct.faultCode != null) {
        if (struct.isSetFaultCode()) {
          oprot.writeFieldBegin(FAULT_CODE_FIELD_DESC);
          oprot.writeString(struct.faultCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.faultCodeState != null) {
        if (struct.isSetFaultCodeState()) {
          oprot.writeFieldBegin(FAULT_CODE_STATE_FIELD_DESC);
          oprot.writeString(struct.faultCodeState);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftObdErrorTupleSchemeFactory implements SchemeFactory {
    public ThriftObdErrorTupleScheme getScheme() {
      return new ThriftObdErrorTupleScheme();
    }
  }

  private static class ThriftObdErrorTupleScheme extends TupleScheme<ThriftObdError> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftObdError struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSn()) {
        optionals.set(0);
      }
      if (struct.isSetGpstime()) {
        optionals.set(1);
      }
      if (struct.isSetFaultCode()) {
        optionals.set(2);
      }
      if (struct.isSetFaultCodeState()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetGpstime()) {
        oprot.writeI64(struct.gpstime);
      }
      if (struct.isSetFaultCode()) {
        oprot.writeString(struct.faultCode);
      }
      if (struct.isSetFaultCodeState()) {
        oprot.writeString(struct.faultCodeState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftObdError struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gpstime = iprot.readI64();
        struct.setGpstimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.faultCode = iprot.readString();
        struct.setFaultCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.faultCodeState = iprot.readString();
        struct.setFaultCodeStateIsSet(true);
      }
    }
  }

}

